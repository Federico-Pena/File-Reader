const logger = (req, res, next) => {
  if (req.url.match(
    /\.(css|js|png|jpg|jpeg|ico|svg|woff|woff2|ttf|eot|mp4|webm|gif)$/
  )) {
    return next();
  }
  const date = /* @__PURE__ */ new Date();
  const methodColor = setColorMethod(req.method);
  const message = `${date.toLocaleDateString()} ${date.toLocaleTimeString()} --> ${methodColor}${req.method}${colors.reset} statusCode ${req.url}`;
  res.on("finish", () => {
    const statusCodeColor = setColorStatusCode(res.statusCode);
    const finalMessage = message.replace(
      "statusCode",
      `${statusCodeColor}${res.statusCode}${colors.reset}`
    );
    console.log(finalMessage);
  });
  next();
};
const setColorStatusCode = (statusCode) => {
  if (statusCode >= 500) {
    return colors.red;
  } else if (statusCode >= 400) {
    return colors.yellow;
  } else if (statusCode >= 300) {
    return colors.cyan;
  } else if (statusCode >= 200) {
    return colors.green;
  } else {
    return colors.white;
  }
};
const setColorMethod = (method) => {
  if (method === "GET") {
    return colors.blue;
  } else if (method === "POST") {
    return colors.magenta;
  } else if (method === "PUT") {
    return colors.cyan;
  } else if (method === "DELETE") {
    return colors.red;
  } else {
    return colors.white;
  }
};
const colors = {
  reset: "\x1B[0m",
  red: "\x1B[31m",
  yellow: "\x1B[33m",
  green: "\x1B[32m",
  blue: "\x1B[34m",
  magenta: "\x1B[35m",
  cyan: "\x1B[36m",
  white: "\x1B[37m"
};
export {
  colors,
  logger
};
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsiLi4vLi4vc3JjL21pZGRsZXdhcmVzL2xvZ2dlci50cyJdLAogICJzb3VyY2VzQ29udGVudCI6IFsiaW1wb3J0IHR5cGUgeyBSZXNwb25zZSwgUmVxdWVzdCwgTmV4dEZ1bmN0aW9uIH0gZnJvbSAnZXhwcmVzcydcclxuXHJcbmV4cG9ydCBjb25zdCBsb2dnZXIgPSAocmVxOiBSZXF1ZXN0LCByZXM6IFJlc3BvbnNlLCBuZXh0OiBOZXh0RnVuY3Rpb24pID0+IHtcclxuICBpZiAoXHJcbiAgICByZXEudXJsLm1hdGNoKFxyXG4gICAgICAvXFwuKGNzc3xqc3xwbmd8anBnfGpwZWd8aWNvfHN2Z3x3b2ZmfHdvZmYyfHR0Znxlb3R8bXA0fHdlYm18Z2lmKSQvXHJcbiAgICApXHJcbiAgKSB7XHJcbiAgICByZXR1cm4gbmV4dCgpXHJcbiAgfVxyXG4gIGNvbnN0IGRhdGUgPSBuZXcgRGF0ZSgpXHJcbiAgY29uc3QgbWV0aG9kQ29sb3IgPSBzZXRDb2xvck1ldGhvZChyZXEubWV0aG9kKVxyXG4gIGNvbnN0IG1lc3NhZ2UgPSBgJHtkYXRlLnRvTG9jYWxlRGF0ZVN0cmluZygpfSAke2RhdGUudG9Mb2NhbGVUaW1lU3RyaW5nKCl9IC0tPiAke21ldGhvZENvbG9yfSR7XHJcbiAgICByZXEubWV0aG9kXHJcbiAgfSR7Y29sb3JzLnJlc2V0fSBzdGF0dXNDb2RlICR7cmVxLnVybH1gXHJcblxyXG4gIHJlcy5vbignZmluaXNoJywgKCkgPT4ge1xyXG4gICAgY29uc3Qgc3RhdHVzQ29kZUNvbG9yID0gc2V0Q29sb3JTdGF0dXNDb2RlKHJlcy5zdGF0dXNDb2RlKVxyXG4gICAgY29uc3QgZmluYWxNZXNzYWdlID0gbWVzc2FnZS5yZXBsYWNlKFxyXG4gICAgICAnc3RhdHVzQ29kZScsXHJcbiAgICAgIGAke3N0YXR1c0NvZGVDb2xvcn0ke3Jlcy5zdGF0dXNDb2RlfSR7Y29sb3JzLnJlc2V0fWBcclxuICAgIClcclxuICAgIGNvbnNvbGUubG9nKGZpbmFsTWVzc2FnZSlcclxuICB9KVxyXG4gIG5leHQoKVxyXG59XHJcblxyXG5jb25zdCBzZXRDb2xvclN0YXR1c0NvZGUgPSAoc3RhdHVzQ29kZTogbnVtYmVyKSA9PiB7XHJcbiAgaWYgKHN0YXR1c0NvZGUgPj0gNTAwKSB7XHJcbiAgICByZXR1cm4gY29sb3JzLnJlZFxyXG4gIH0gZWxzZSBpZiAoc3RhdHVzQ29kZSA+PSA0MDApIHtcclxuICAgIHJldHVybiBjb2xvcnMueWVsbG93XHJcbiAgfSBlbHNlIGlmIChzdGF0dXNDb2RlID49IDMwMCkge1xyXG4gICAgcmV0dXJuIGNvbG9ycy5jeWFuXHJcbiAgfSBlbHNlIGlmIChzdGF0dXNDb2RlID49IDIwMCkge1xyXG4gICAgcmV0dXJuIGNvbG9ycy5ncmVlblxyXG4gIH0gZWxzZSB7XHJcbiAgICByZXR1cm4gY29sb3JzLndoaXRlXHJcbiAgfVxyXG59XHJcblxyXG5jb25zdCBzZXRDb2xvck1ldGhvZCA9IChtZXRob2Q6IHN0cmluZykgPT4ge1xyXG4gIGlmIChtZXRob2QgPT09ICdHRVQnKSB7XHJcbiAgICByZXR1cm4gY29sb3JzLmJsdWVcclxuICB9IGVsc2UgaWYgKG1ldGhvZCA9PT0gJ1BPU1QnKSB7XHJcbiAgICByZXR1cm4gY29sb3JzLm1hZ2VudGFcclxuICB9IGVsc2UgaWYgKG1ldGhvZCA9PT0gJ1BVVCcpIHtcclxuICAgIHJldHVybiBjb2xvcnMuY3lhblxyXG4gIH0gZWxzZSBpZiAobWV0aG9kID09PSAnREVMRVRFJykge1xyXG4gICAgcmV0dXJuIGNvbG9ycy5yZWRcclxuICB9IGVsc2Uge1xyXG4gICAgcmV0dXJuIGNvbG9ycy53aGl0ZVxyXG4gIH1cclxufVxyXG5cclxuZXhwb3J0IGNvbnN0IGNvbG9ycyA9IHtcclxuICByZXNldDogJ1xceDFiWzBtJyxcclxuICByZWQ6ICdcXHgxYlszMW0nLFxyXG4gIHllbGxvdzogJ1xceDFiWzMzbScsXHJcbiAgZ3JlZW46ICdcXHgxYlszMm0nLFxyXG4gIGJsdWU6ICdcXHgxYlszNG0nLFxyXG4gIG1hZ2VudGE6ICdcXHgxYlszNW0nLFxyXG4gIGN5YW46ICdcXHgxYlszNm0nLFxyXG4gIHdoaXRlOiAnXFx4MWJbMzdtJ1xyXG59XHJcbiJdLAogICJtYXBwaW5ncyI6ICJBQUVPLE1BQU0sU0FBUyxDQUFDLEtBQWMsS0FBZSxTQUF1QjtBQUN6RSxNQUNFLElBQUksSUFBSTtBQUFBLElBQ047QUFBQSxFQUNGLEdBQ0E7QUFDQSxXQUFPLEtBQUs7QUFBQSxFQUNkO0FBQ0EsUUFBTSxPQUFPLG9CQUFJLEtBQUs7QUFDdEIsUUFBTSxjQUFjLGVBQWUsSUFBSSxNQUFNO0FBQzdDLFFBQU0sVUFBVSxHQUFHLEtBQUssbUJBQW1CLENBQUMsSUFBSSxLQUFLLG1CQUFtQixDQUFDLFFBQVEsV0FBVyxHQUMxRixJQUFJLE1BQ04sR0FBRyxPQUFPLEtBQUssZUFBZSxJQUFJLEdBQUc7QUFFckMsTUFBSSxHQUFHLFVBQVUsTUFBTTtBQUNyQixVQUFNLGtCQUFrQixtQkFBbUIsSUFBSSxVQUFVO0FBQ3pELFVBQU0sZUFBZSxRQUFRO0FBQUEsTUFDM0I7QUFBQSxNQUNBLEdBQUcsZUFBZSxHQUFHLElBQUksVUFBVSxHQUFHLE9BQU8sS0FBSztBQUFBLElBQ3BEO0FBQ0EsWUFBUSxJQUFJLFlBQVk7QUFBQSxFQUMxQixDQUFDO0FBQ0QsT0FBSztBQUNQO0FBRUEsTUFBTSxxQkFBcUIsQ0FBQyxlQUF1QjtBQUNqRCxNQUFJLGNBQWMsS0FBSztBQUNyQixXQUFPLE9BQU87QUFBQSxFQUNoQixXQUFXLGNBQWMsS0FBSztBQUM1QixXQUFPLE9BQU87QUFBQSxFQUNoQixXQUFXLGNBQWMsS0FBSztBQUM1QixXQUFPLE9BQU87QUFBQSxFQUNoQixXQUFXLGNBQWMsS0FBSztBQUM1QixXQUFPLE9BQU87QUFBQSxFQUNoQixPQUFPO0FBQ0wsV0FBTyxPQUFPO0FBQUEsRUFDaEI7QUFDRjtBQUVBLE1BQU0saUJBQWlCLENBQUMsV0FBbUI7QUFDekMsTUFBSSxXQUFXLE9BQU87QUFDcEIsV0FBTyxPQUFPO0FBQUEsRUFDaEIsV0FBVyxXQUFXLFFBQVE7QUFDNUIsV0FBTyxPQUFPO0FBQUEsRUFDaEIsV0FBVyxXQUFXLE9BQU87QUFDM0IsV0FBTyxPQUFPO0FBQUEsRUFDaEIsV0FBVyxXQUFXLFVBQVU7QUFDOUIsV0FBTyxPQUFPO0FBQUEsRUFDaEIsT0FBTztBQUNMLFdBQU8sT0FBTztBQUFBLEVBQ2hCO0FBQ0Y7QUFFTyxNQUFNLFNBQVM7QUFBQSxFQUNwQixPQUFPO0FBQUEsRUFDUCxLQUFLO0FBQUEsRUFDTCxRQUFRO0FBQUEsRUFDUixPQUFPO0FBQUEsRUFDUCxNQUFNO0FBQUEsRUFDTixTQUFTO0FBQUEsRUFDVCxNQUFNO0FBQUEsRUFDTixPQUFPO0FBQ1Q7IiwKICAibmFtZXMiOiBbXQp9Cg==
